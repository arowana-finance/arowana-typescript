/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common.js";

export interface AGTFeedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addSettler"
      | "asset"
      | "checkUpkeep"
      | "decimals"
      | "deploymentTimestamp"
      | "description"
      | "donID"
      | "gasLimit"
      | "getAnswer"
      | "getRoundData"
      | "getTimestamp"
      | "getTimestampAnswer"
      | "getUpkeepTime"
      | "handleOracleFulfillment"
      | "i_router"
      | "initialize"
      | "lastUpkeep"
      | "latestAnswer"
      | "latestRound"
      | "latestRoundData"
      | "latestTimestamp"
      | "maxBaseGasPrice"
      | "owner"
      | "performUpkeep"
      | "remoteChain"
      | "remoteChainOracle"
      | "removeSettler"
      | "renounceOwnership"
      | "request"
      | "s_lastRequestId"
      | "sendRequestCBOR"
      | "setAGTFeedInfo"
      | "setARWFeedInfo"
      | "setAsset"
      | "setConsumer"
      | "setDescription"
      | "setFeedInfo"
      | "setInterval"
      | "setUpkeep"
      | "setVersion"
      | "settlers"
      | "subscriptionId"
      | "transferOwnership"
      | "updateAnswer"
      | "updateInterval"
      | "updateRequest"
      | "upkeepContract"
      | "upkeepInterval"
      | "upkeepRateCap"
      | "upkeepRateInterval"
      | "upkeepRates"
      | "version",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddSettler"
      | "AnswerUpdated"
      | "Initialized"
      | "NewAsset"
      | "NewDescription"
      | "NewRound"
      | "OwnershipTransferred"
      | "RemoveSettler"
      | "RequestFulfilled"
      | "RequestSent"
      | "Response"
      | "SetConsumer"
      | "SetUpkeep",
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addSettler",
    values: [AddressLike],
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deploymentTimestamp",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "donID", values?: undefined): string;
  encodeFunctionData(functionFragment: "gasLimit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAnswer",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundData",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestampAnswer",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getUpkeepTime",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [BytesLike, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: "i_router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpkeep",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "latestAnswer",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "latestRound",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "latestRoundData",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "latestTimestamp",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "maxBaseGasPrice",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "remoteChain",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "remoteChainOracle",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "removeSettler",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "request", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "s_lastRequestId",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "sendRequestCBOR",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "setAGTFeedInfo",
    values: [
      AddressLike,
      string,
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "setARWFeedInfo",
    values: [
      AddressLike,
      string,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "setAsset",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "setConsumer",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "setDescription",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "setFeedInfo",
    values: [AddressLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: "setInterval",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "setUpkeep",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "setVersion",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "settlers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "subscriptionId",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "updateAnswer",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "updateInterval",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "updateRequest",
    values: [BytesLike, BigNumberish, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "upkeepContract",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "upkeepInterval",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "upkeepRateCap",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "upkeepRateInterval",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "upkeepRates",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addSettler", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deploymentTimestamp",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "donID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gasLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAnswer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoundData",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestampAnswer",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpkeepTime",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "i_router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastUpkeep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestAnswer",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRound",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundData",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestTimestamp",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBaseGasPrice",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "remoteChain",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "remoteChainOracle",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSettler",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "request", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_lastRequestId",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRequestCBOR",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAGTFeedInfo",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setARWFeedInfo",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "setAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setConsumer",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDescription",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeedInfo",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterval",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "setUpkeep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settlers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionId",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAnswer",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInterval",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRequest",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "upkeepContract",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "upkeepInterval",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "upkeepRateCap",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "upkeepRateInterval",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "upkeepRates",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AddSettlerEvent {
  export type InputTuple = [newSettler: AddressLike];
  export type OutputTuple = [newSettler: string];
  export interface OutputObject {
    newSettler: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AnswerUpdatedEvent {
  export type InputTuple = [
    current: BigNumberish,
    roundId: BigNumberish,
    updatedAt: BigNumberish,
  ];
  export type OutputTuple = [
    current: bigint,
    roundId: bigint,
    updatedAt: bigint,
  ];
  export interface OutputObject {
    current: bigint;
    roundId: bigint;
    updatedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAssetEvent {
  export type InputTuple = [asset: AddressLike];
  export type OutputTuple = [asset: string];
  export interface OutputObject {
    asset: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewDescriptionEvent {
  export type InputTuple = [description: string];
  export type OutputTuple = [description: string];
  export interface OutputObject {
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewRoundEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    startedBy: AddressLike,
    startedAt: BigNumberish,
  ];
  export type OutputTuple = [
    roundId: bigint,
    startedBy: string,
    startedAt: bigint,
  ];
  export interface OutputObject {
    roundId: bigint;
    startedBy: string;
    startedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveSettlerEvent {
  export type InputTuple = [oldSettler: AddressLike];
  export type OutputTuple = [oldSettler: string];
  export interface OutputObject {
    oldSettler: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestFulfilledEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSentEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResponseEvent {
  export type InputTuple = [
    requestId: BytesLike,
    response: BytesLike,
    err: BytesLike,
  ];
  export type OutputTuple = [requestId: string, response: string, err: string];
  export interface OutputObject {
    requestId: string;
    response: string;
    err: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetConsumerEvent {
  export type InputTuple = [router: AddressLike];
  export type OutputTuple = [router: string];
  export interface OutputObject {
    router: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetUpkeepEvent {
  export type InputTuple = [
    upkeepContract: AddressLike,
    upkeepInterval: BigNumberish,
    upkeepRateInterval: BigNumberish,
    upkeepRateCap: BigNumberish,
    maxBaseGasPrice: BigNumberish,
  ];
  export type OutputTuple = [
    upkeepContract: string,
    upkeepInterval: bigint,
    upkeepRateInterval: bigint,
    upkeepRateCap: bigint,
    maxBaseGasPrice: bigint,
  ];
  export interface OutputObject {
    upkeepContract: string;
    upkeepInterval: bigint;
    upkeepRateInterval: bigint;
    upkeepRateCap: bigint;
    maxBaseGasPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AGTFeed extends BaseContract {
  connect(runner?: ContractRunner | null): AGTFeed;
  waitForDeployment(): Promise<this>;

  interface: AGTFeedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  addSettler: TypedContractMethod<
    [_settler: AddressLike],
    [void],
    "nonpayable"
  >;

  asset: TypedContractMethod<[], [string], "view">;

  checkUpkeep: TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean }],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  deploymentTimestamp: TypedContractMethod<[], [bigint], "view">;

  description: TypedContractMethod<[], [string], "view">;

  donID: TypedContractMethod<[], [string], "view">;

  gasLimit: TypedContractMethod<[], [bigint], "view">;

  getAnswer: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getRoundData: TypedContractMethod<
    [_roundId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      },
    ],
    "view"
  >;

  getTimestamp: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getTimestampAnswer: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  getUpkeepTime: TypedContractMethod<
    [timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  handleOracleFulfillment: TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;

  i_router: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [_initOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  lastUpkeep: TypedContractMethod<[], [bigint], "view">;

  latestAnswer: TypedContractMethod<[], [bigint], "view">;

  latestRound: TypedContractMethod<[], [bigint], "view">;

  latestRoundData: TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  latestTimestamp: TypedContractMethod<[], [bigint], "view">;

  maxBaseGasPrice: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  performUpkeep: TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;

  remoteChain: TypedContractMethod<[], [bigint], "view">;

  remoteChainOracle: TypedContractMethod<[], [string], "view">;

  removeSettler: TypedContractMethod<
    [_settler: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  request: TypedContractMethod<[], [string], "view">;

  s_lastRequestId: TypedContractMethod<[], [string], "view">;

  sendRequestCBOR: TypedContractMethod<[], [string], "nonpayable">;

  setAGTFeedInfo: TypedContractMethod<
    [
      _asset: AddressLike,
      _description: string,
      _remoteChain: BigNumberish,
      _remoteChainOracle: AddressLike,
      _router: AddressLike,
      _upkeepContract: AddressLike,
      _upkeepInterval: BigNumberish,
      _upkeepRateInterval: BigNumberish,
      _upkeepRateCap: BigNumberish,
      _maxBaseGasPrice: BigNumberish,
      _updateInterval: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;

  setARWFeedInfo: TypedContractMethod<
    [
      _asset: AddressLike,
      _description: string,
      _router: AddressLike,
      _upkeepContract: AddressLike,
      _upkeepInterval: BigNumberish,
      _upkeepRateInterval: BigNumberish,
      _upkeepRateCap: BigNumberish,
      _maxBaseGasPrice: BigNumberish,
      _updateInterval: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;

  setAsset: TypedContractMethod<[_asset: AddressLike], [void], "nonpayable">;

  setConsumer: TypedContractMethod<
    [_router: AddressLike],
    [void],
    "nonpayable"
  >;

  setDescription: TypedContractMethod<
    [_description: string],
    [void],
    "nonpayable"
  >;

  setFeedInfo: TypedContractMethod<
    [_asset: AddressLike, _description: string],
    [void],
    "nonpayable"
  >;

  setInterval: TypedContractMethod<
    [_updateInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUpkeep: TypedContractMethod<
    [
      _upkeepContract: AddressLike,
      _upkeepInterval: BigNumberish,
      _upkeepRateInterval: BigNumberish,
      _upkeepRateCap: BigNumberish,
      _maxBaseGasPrice: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;

  setVersion: TypedContractMethod<
    [_version: BigNumberish],
    [void],
    "nonpayable"
  >;

  settlers: TypedContractMethod<[], [string[]], "view">;

  subscriptionId: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateAnswer: TypedContractMethod<
    [newAnswer: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateInterval: TypedContractMethod<[], [bigint], "view">;

  updateRequest: TypedContractMethod<
    [
      _request: BytesLike,
      _subscriptionId: BigNumberish,
      _gasLimit: BigNumberish,
      _donID: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  upkeepContract: TypedContractMethod<[], [string], "view">;

  upkeepInterval: TypedContractMethod<[], [bigint], "view">;

  upkeepRateCap: TypedContractMethod<[], [bigint], "view">;

  upkeepRateInterval: TypedContractMethod<[], [bigint], "view">;

  upkeepRates: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "addSettler",
  ): TypedContractMethod<[_settler: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "asset",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkUpkeep",
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "decimals",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deploymentTimestamp",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "description",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "donID",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gasLimit",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAnswer",
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoundData",
  ): TypedContractMethod<
    [_roundId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      },
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimestamp",
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTimestampAnswer",
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUpkeepTime",
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "handleOracleFulfillment",
  ): TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "i_router",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize",
  ): TypedContractMethod<[_initOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lastUpkeep",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestAnswer",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestRound",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestRoundData",
  ): TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestTimestamp",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxBaseGasPrice",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "performUpkeep",
  ): TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "remoteChain",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "remoteChainOracle",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeSettler",
  ): TypedContractMethod<[_settler: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "request",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "s_lastRequestId",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sendRequestCBOR",
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "setAGTFeedInfo",
  ): TypedContractMethod<
    [
      _asset: AddressLike,
      _description: string,
      _remoteChain: BigNumberish,
      _remoteChainOracle: AddressLike,
      _router: AddressLike,
      _upkeepContract: AddressLike,
      _upkeepInterval: BigNumberish,
      _upkeepRateInterval: BigNumberish,
      _upkeepRateCap: BigNumberish,
      _maxBaseGasPrice: BigNumberish,
      _updateInterval: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setARWFeedInfo",
  ): TypedContractMethod<
    [
      _asset: AddressLike,
      _description: string,
      _router: AddressLike,
      _upkeepContract: AddressLike,
      _upkeepInterval: BigNumberish,
      _upkeepRateInterval: BigNumberish,
      _upkeepRateCap: BigNumberish,
      _maxBaseGasPrice: BigNumberish,
      _updateInterval: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAsset",
  ): TypedContractMethod<[_asset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setConsumer",
  ): TypedContractMethod<[_router: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDescription",
  ): TypedContractMethod<[_description: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeedInfo",
  ): TypedContractMethod<
    [_asset: AddressLike, _description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setInterval",
  ): TypedContractMethod<[_updateInterval: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUpkeep",
  ): TypedContractMethod<
    [
      _upkeepContract: AddressLike,
      _upkeepInterval: BigNumberish,
      _upkeepRateInterval: BigNumberish,
      _upkeepRateCap: BigNumberish,
      _maxBaseGasPrice: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVersion",
  ): TypedContractMethod<[_version: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settlers",
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "subscriptionId",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership",
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAnswer",
  ): TypedContractMethod<[newAnswer: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateInterval",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateRequest",
  ): TypedContractMethod<
    [
      _request: BytesLike,
      _subscriptionId: BigNumberish,
      _gasLimit: BigNumberish,
      _donID: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upkeepContract",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "upkeepInterval",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "upkeepRateCap",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "upkeepRateInterval",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "upkeepRates",
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "version",
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AddSettler",
  ): TypedContractEvent<
    AddSettlerEvent.InputTuple,
    AddSettlerEvent.OutputTuple,
    AddSettlerEvent.OutputObject
  >;
  getEvent(
    key: "AnswerUpdated",
  ): TypedContractEvent<
    AnswerUpdatedEvent.InputTuple,
    AnswerUpdatedEvent.OutputTuple,
    AnswerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized",
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewAsset",
  ): TypedContractEvent<
    NewAssetEvent.InputTuple,
    NewAssetEvent.OutputTuple,
    NewAssetEvent.OutputObject
  >;
  getEvent(
    key: "NewDescription",
  ): TypedContractEvent<
    NewDescriptionEvent.InputTuple,
    NewDescriptionEvent.OutputTuple,
    NewDescriptionEvent.OutputObject
  >;
  getEvent(
    key: "NewRound",
  ): TypedContractEvent<
    NewRoundEvent.InputTuple,
    NewRoundEvent.OutputTuple,
    NewRoundEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred",
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RemoveSettler",
  ): TypedContractEvent<
    RemoveSettlerEvent.InputTuple,
    RemoveSettlerEvent.OutputTuple,
    RemoveSettlerEvent.OutputObject
  >;
  getEvent(
    key: "RequestFulfilled",
  ): TypedContractEvent<
    RequestFulfilledEvent.InputTuple,
    RequestFulfilledEvent.OutputTuple,
    RequestFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RequestSent",
  ): TypedContractEvent<
    RequestSentEvent.InputTuple,
    RequestSentEvent.OutputTuple,
    RequestSentEvent.OutputObject
  >;
  getEvent(
    key: "Response",
  ): TypedContractEvent<
    ResponseEvent.InputTuple,
    ResponseEvent.OutputTuple,
    ResponseEvent.OutputObject
  >;
  getEvent(
    key: "SetConsumer",
  ): TypedContractEvent<
    SetConsumerEvent.InputTuple,
    SetConsumerEvent.OutputTuple,
    SetConsumerEvent.OutputObject
  >;
  getEvent(
    key: "SetUpkeep",
  ): TypedContractEvent<
    SetUpkeepEvent.InputTuple,
    SetUpkeepEvent.OutputTuple,
    SetUpkeepEvent.OutputObject
  >;

  filters: {
    "AddSettler(address)": TypedContractEvent<
      AddSettlerEvent.InputTuple,
      AddSettlerEvent.OutputTuple,
      AddSettlerEvent.OutputObject
    >;
    AddSettler: TypedContractEvent<
      AddSettlerEvent.InputTuple,
      AddSettlerEvent.OutputTuple,
      AddSettlerEvent.OutputObject
    >;

    "AnswerUpdated(int256,uint256,uint256)": TypedContractEvent<
      AnswerUpdatedEvent.InputTuple,
      AnswerUpdatedEvent.OutputTuple,
      AnswerUpdatedEvent.OutputObject
    >;
    AnswerUpdated: TypedContractEvent<
      AnswerUpdatedEvent.InputTuple,
      AnswerUpdatedEvent.OutputTuple,
      AnswerUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewAsset(address)": TypedContractEvent<
      NewAssetEvent.InputTuple,
      NewAssetEvent.OutputTuple,
      NewAssetEvent.OutputObject
    >;
    NewAsset: TypedContractEvent<
      NewAssetEvent.InputTuple,
      NewAssetEvent.OutputTuple,
      NewAssetEvent.OutputObject
    >;

    "NewDescription(string)": TypedContractEvent<
      NewDescriptionEvent.InputTuple,
      NewDescriptionEvent.OutputTuple,
      NewDescriptionEvent.OutputObject
    >;
    NewDescription: TypedContractEvent<
      NewDescriptionEvent.InputTuple,
      NewDescriptionEvent.OutputTuple,
      NewDescriptionEvent.OutputObject
    >;

    "NewRound(uint256,address,uint256)": TypedContractEvent<
      NewRoundEvent.InputTuple,
      NewRoundEvent.OutputTuple,
      NewRoundEvent.OutputObject
    >;
    NewRound: TypedContractEvent<
      NewRoundEvent.InputTuple,
      NewRoundEvent.OutputTuple,
      NewRoundEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RemoveSettler(address)": TypedContractEvent<
      RemoveSettlerEvent.InputTuple,
      RemoveSettlerEvent.OutputTuple,
      RemoveSettlerEvent.OutputObject
    >;
    RemoveSettler: TypedContractEvent<
      RemoveSettlerEvent.InputTuple,
      RemoveSettlerEvent.OutputTuple,
      RemoveSettlerEvent.OutputObject
    >;

    "RequestFulfilled(bytes32)": TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;
    RequestFulfilled: TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;

    "RequestSent(bytes32)": TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;
    RequestSent: TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;

    "Response(bytes32,bytes,bytes)": TypedContractEvent<
      ResponseEvent.InputTuple,
      ResponseEvent.OutputTuple,
      ResponseEvent.OutputObject
    >;
    Response: TypedContractEvent<
      ResponseEvent.InputTuple,
      ResponseEvent.OutputTuple,
      ResponseEvent.OutputObject
    >;

    "SetConsumer(address)": TypedContractEvent<
      SetConsumerEvent.InputTuple,
      SetConsumerEvent.OutputTuple,
      SetConsumerEvent.OutputObject
    >;
    SetConsumer: TypedContractEvent<
      SetConsumerEvent.InputTuple,
      SetConsumerEvent.OutputTuple,
      SetConsumerEvent.OutputObject
    >;

    "SetUpkeep(address,uint64,uint64,uint64,uint64)": TypedContractEvent<
      SetUpkeepEvent.InputTuple,
      SetUpkeepEvent.OutputTuple,
      SetUpkeepEvent.OutputObject
    >;
    SetUpkeep: TypedContractEvent<
      SetUpkeepEvent.InputTuple,
      SetUpkeepEvent.OutputTuple,
      SetUpkeepEvent.OutputObject
    >;
  };
}
