/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common.js";

export interface ARWSupplyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ARW"
      | "addExcludedAddress"
      | "circulatingSupply"
      | "excludedAddresses"
      | "excludedSupply"
      | "initialize"
      | "owner"
      | "removeExcludedaddress"
      | "renounceOwnership"
      | "transferOwnership",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddExcludedAddress"
      | "Initialized(uint64)"
      | "Initialized(address)"
      | "OwnershipTransferred"
      | "RemoveExcludedAddress",
  ): EventFragment;

  encodeFunctionData(functionFragment: "ARW", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addExcludedAddress",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "circulatingSupply",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "excludedAddresses",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "excludedSupply",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike],
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeExcludedaddress",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike],
  ): string;

  decodeFunctionResult(functionFragment: "ARW", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addExcludedAddress",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "circulatingSupply",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludedAddresses",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludedSupply",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeExcludedaddress",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike,
  ): Result;
}

export namespace AddExcludedAddressEvent {
  export type InputTuple = [excluded: AddressLike];
  export type OutputTuple = [excluded: string];
  export interface OutputObject {
    excluded: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Initialized_uint64_Event {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Initialized_address_Event {
  export type InputTuple = [arw: AddressLike];
  export type OutputTuple = [arw: string];
  export interface OutputObject {
    arw: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveExcludedAddressEvent {
  export type InputTuple = [excluded: AddressLike];
  export type OutputTuple = [excluded: string];
  export interface OutputObject {
    excluded: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ARWSupply extends BaseContract {
  connect(runner?: ContractRunner | null): ARWSupply;
  waitForDeployment(): Promise<this>;

  interface: ARWSupplyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  ARW: TypedContractMethod<[], [string], "view">;

  addExcludedAddress: TypedContractMethod<
    [_excluded: AddressLike],
    [void],
    "nonpayable"
  >;

  circulatingSupply: TypedContractMethod<[], [bigint], "view">;

  excludedAddresses: TypedContractMethod<[], [string[]], "view">;

  excludedSupply: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<[_ARW: AddressLike], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  removeExcludedaddress: TypedContractMethod<
    [_excluded: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "ARW",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addExcludedAddress",
  ): TypedContractMethod<[_excluded: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "circulatingSupply",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "excludedAddresses",
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "excludedSupply",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize",
  ): TypedContractMethod<[_ARW: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeExcludedaddress",
  ): TypedContractMethod<[_excluded: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership",
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AddExcludedAddress",
  ): TypedContractEvent<
    AddExcludedAddressEvent.InputTuple,
    AddExcludedAddressEvent.OutputTuple,
    AddExcludedAddressEvent.OutputObject
  >;
  getEvent(
    key: "Initialized(uint64)",
  ): TypedContractEvent<
    Initialized_uint64_Event.InputTuple,
    Initialized_uint64_Event.OutputTuple,
    Initialized_uint64_Event.OutputObject
  >;
  getEvent(
    key: "Initialized(address)",
  ): TypedContractEvent<
    Initialized_address_Event.InputTuple,
    Initialized_address_Event.OutputTuple,
    Initialized_address_Event.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred",
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RemoveExcludedAddress",
  ): TypedContractEvent<
    RemoveExcludedAddressEvent.InputTuple,
    RemoveExcludedAddressEvent.OutputTuple,
    RemoveExcludedAddressEvent.OutputObject
  >;

  filters: {
    "AddExcludedAddress(address)": TypedContractEvent<
      AddExcludedAddressEvent.InputTuple,
      AddExcludedAddressEvent.OutputTuple,
      AddExcludedAddressEvent.OutputObject
    >;
    AddExcludedAddress: TypedContractEvent<
      AddExcludedAddressEvent.InputTuple,
      AddExcludedAddressEvent.OutputTuple,
      AddExcludedAddressEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      Initialized_uint64_Event.InputTuple,
      Initialized_uint64_Event.OutputTuple,
      Initialized_uint64_Event.OutputObject
    >;
    "Initialized(address)": TypedContractEvent<
      Initialized_address_Event.InputTuple,
      Initialized_address_Event.OutputTuple,
      Initialized_address_Event.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RemoveExcludedAddress(address)": TypedContractEvent<
      RemoveExcludedAddressEvent.InputTuple,
      RemoveExcludedAddressEvent.OutputTuple,
      RemoveExcludedAddressEvent.OutputObject
    >;
    RemoveExcludedAddress: TypedContractEvent<
      RemoveExcludedAddressEvent.InputTuple,
      RemoveExcludedAddressEvent.OutputTuple,
      RemoveExcludedAddressEvent.OutputObject
    >;
  };
}
