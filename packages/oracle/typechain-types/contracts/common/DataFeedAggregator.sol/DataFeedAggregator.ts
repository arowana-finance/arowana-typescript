/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common.js";

export interface DataFeedAggregatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "aggregator"
      | "asset"
      | "callAsset"
      | "decimals"
      | "deploymentTimestamp"
      | "description"
      | "getAnswer"
      | "getRoundData"
      | "getTimestamp"
      | "getTimestampAnswer"
      | "initialize"
      | "latestAnswer"
      | "latestRound"
      | "latestRoundData"
      | "latestTimestamp"
      | "owner"
      | "phaseAggregators"
      | "phaseId"
      | "proposeAggregator"
      | "renounceOwnership"
      | "transferOwnership"
      | "version",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeedConfirmed"
      | "FeedProposed"
      | "Initialized"
      | "OwnershipTransferred",
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "aggregator",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "callAsset",
    values: [AddressLike],
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deploymentTimestamp",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getAnswer",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundData",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestampAnswer",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "latestAnswer",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "latestRound",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "latestRoundData",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "latestTimestamp",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "phaseAggregators",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "phaseId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeAggregator",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike],
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "aggregator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "callAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deploymentTimestamp",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getAnswer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoundData",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestampAnswer",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestAnswer",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRound",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundData",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestTimestamp",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "phaseAggregators",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "phaseId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeAggregator",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace FeedConfirmedEvent {
  export type InputTuple = [
    asset: AddressLike,
    denomination: AddressLike,
    latestAggregator: AddressLike,
    previousAggregator: AddressLike,
    nextPhaseId: BigNumberish,
    sender: AddressLike,
  ];
  export type OutputTuple = [
    asset: string,
    denomination: string,
    latestAggregator: string,
    previousAggregator: string,
    nextPhaseId: bigint,
    sender: string,
  ];
  export interface OutputObject {
    asset: string;
    denomination: string;
    latestAggregator: string;
    previousAggregator: string;
    nextPhaseId: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeedProposedEvent {
  export type InputTuple = [
    asset: AddressLike,
    denomination: AddressLike,
    proposedAggregator: AddressLike,
    currentAggregator: AddressLike,
    sender: AddressLike,
  ];
  export type OutputTuple = [
    asset: string,
    denomination: string,
    proposedAggregator: string,
    currentAggregator: string,
    sender: string,
  ];
  export interface OutputObject {
    asset: string;
    denomination: string;
    proposedAggregator: string;
    currentAggregator: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DataFeedAggregator extends BaseContract {
  connect(runner?: ContractRunner | null): DataFeedAggregator;
  waitForDeployment(): Promise<this>;

  interface: DataFeedAggregatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  aggregator: TypedContractMethod<[], [string], "view">;

  asset: TypedContractMethod<[], [string], "view">;

  callAsset: TypedContractMethod<[_aggregator: AddressLike], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  deploymentTimestamp: TypedContractMethod<[], [bigint], "view">;

  description: TypedContractMethod<[], [string], "view">;

  getAnswer: TypedContractMethod<[_roundId: BigNumberish], [bigint], "view">;

  getRoundData: TypedContractMethod<
    [_roundId: BigNumberish],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  getTimestamp: TypedContractMethod<[_roundId: BigNumberish], [bigint], "view">;

  getTimestampAnswer: TypedContractMethod<
    [_timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [_initOwner: AddressLike, _aggregator: AddressLike],
    [void],
    "nonpayable"
  >;

  latestAnswer: TypedContractMethod<[], [bigint], "view">;

  latestRound: TypedContractMethod<[], [bigint], "view">;

  latestRoundData: TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  latestTimestamp: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  phaseAggregators: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  phaseId: TypedContractMethod<[], [bigint], "view">;

  proposeAggregator: TypedContractMethod<
    [_aggregator: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "aggregator",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "asset",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "callAsset",
  ): TypedContractMethod<[_aggregator: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "decimals",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deploymentTimestamp",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "description",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAnswer",
  ): TypedContractMethod<[_roundId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoundData",
  ): TypedContractMethod<
    [_roundId: BigNumberish],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimestamp",
  ): TypedContractMethod<[_roundId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTimestampAnswer",
  ): TypedContractMethod<[_timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize",
  ): TypedContractMethod<
    [_initOwner: AddressLike, _aggregator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "latestAnswer",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestRound",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestRoundData",
  ): TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestTimestamp",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "phaseAggregators",
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "phaseId",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposeAggregator",
  ): TypedContractMethod<[_aggregator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership",
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version",
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "FeedConfirmed",
  ): TypedContractEvent<
    FeedConfirmedEvent.InputTuple,
    FeedConfirmedEvent.OutputTuple,
    FeedConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "FeedProposed",
  ): TypedContractEvent<
    FeedProposedEvent.InputTuple,
    FeedProposedEvent.OutputTuple,
    FeedProposedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized",
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred",
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "FeedConfirmed(address,address,address,address,uint16,address)": TypedContractEvent<
      FeedConfirmedEvent.InputTuple,
      FeedConfirmedEvent.OutputTuple,
      FeedConfirmedEvent.OutputObject
    >;
    FeedConfirmed: TypedContractEvent<
      FeedConfirmedEvent.InputTuple,
      FeedConfirmedEvent.OutputTuple,
      FeedConfirmedEvent.OutputObject
    >;

    "FeedProposed(address,address,address,address,address)": TypedContractEvent<
      FeedProposedEvent.InputTuple,
      FeedProposedEvent.OutputTuple,
      FeedProposedEvent.OutputObject
    >;
    FeedProposed: TypedContractEvent<
      FeedProposedEvent.InputTuple,
      FeedProposedEvent.OutputTuple,
      FeedProposedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
