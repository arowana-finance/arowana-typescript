/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from"./index.js";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Lock",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Lock__factory>;
    getContractFactory(
      name: "IERC20Mintable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Mintable__factory>;
    getContractFactory(
      name: "IERC20Exp",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Exp__factory>;
    getContractFactory(
      name: "FunctionsClient",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.FunctionsClient__factory>;
    getContractFactory(
      name: "BaseFunctionsConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.BaseFunctionsConsumer__factory>;
    getContractFactory(
      name: "ARWFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ARWFeed__factory>;
    getContractFactory(
      name: "AGTReserveFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AGTReserveFeed__factory>;
    getContractFactory(
      name: "AGTFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AGTFeed__factory>;
    getContractFactory(
      name: "WithSettler",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.WithSettler__factory>;
    getContractFactory(
      name: "DataFeedAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.DataFeedAggregator__factory>;
    getContractFactory(
      name: "DataFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.DataFeed__factory>;
    getContractFactory(
      name: "ARWSupply",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ARWSupply__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "FunctionsRequest",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.FunctionsRequest__factory>;
    getContractFactory(
      name: "IFunctionsRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IFunctionsRouter__factory>;
    getContractFactory(
      name: "IFunctionsClient",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IFunctionsClient__factory>;
    getContractFactory(
      name: "AutomationCompatibleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AutomationCompatibleInterface__factory>;
    getContractFactory(
      name: "AutomationCompatible",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AutomationCompatible__factory>;
    getContractFactory(
      name: "AutomationBase",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AutomationBase__factory>;

    getContractAt(
      name: "Lock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.Lock>;
    getContractAt(
      name: "IERC20Mintable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20Mintable>;
    getContractAt(
      name: "IERC20Exp",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20Exp>;
    getContractAt(
      name: "FunctionsClient",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.FunctionsClient>;
    getContractAt(
      name: "BaseFunctionsConsumer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.BaseFunctionsConsumer>;
    getContractAt(
      name: "ARWFeed",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ARWFeed>;
    getContractAt(
      name: "AGTReserveFeed",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.AGTReserveFeed>;
    getContractAt(
      name: "AGTFeed",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.AGTFeed>;
    getContractAt(
      name: "WithSettler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.WithSettler>;
    getContractAt(
      name: "DataFeedAggregator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.DataFeedAggregator>;
    getContractAt(
      name: "DataFeed",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.DataFeed>;
    getContractAt(
      name: "ARWSupply",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ARWSupply>;
    getContractAt(
      name: "SafeCast",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "FunctionsRequest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.FunctionsRequest>;
    getContractAt(
      name: "IFunctionsRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IFunctionsRouter>;
    getContractAt(
      name: "IFunctionsClient",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IFunctionsClient>;
    getContractAt(
      name: "AutomationCompatibleInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.AutomationCompatibleInterface>;
    getContractAt(
      name: "AutomationCompatible",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.AutomationCompatible>;
    getContractAt(
      name: "AutomationBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.AutomationBase>;

    deployContract(
      name: "Lock",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Lock>;
    deployContract(
      name: "IERC20Mintable",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20Mintable>;
    deployContract(
      name: "IERC20Exp",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20Exp>;
    deployContract(
      name: "FunctionsClient",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.FunctionsClient>;
    deployContract(
      name: "BaseFunctionsConsumer",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.BaseFunctionsConsumer>;
    deployContract(
      name: "ARWFeed",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ARWFeed>;
    deployContract(
      name: "AGTReserveFeed",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AGTReserveFeed>;
    deployContract(
      name: "AGTFeed",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AGTFeed>;
    deployContract(
      name: "WithSettler",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.WithSettler>;
    deployContract(
      name: "DataFeedAggregator",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.DataFeedAggregator>;
    deployContract(
      name: "DataFeed",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.DataFeed>;
    deployContract(
      name: "ARWSupply",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ARWSupply>;
    deployContract(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "FunctionsRequest",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.FunctionsRequest>;
    deployContract(
      name: "IFunctionsRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IFunctionsRouter>;
    deployContract(
      name: "IFunctionsClient",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IFunctionsClient>;
    deployContract(
      name: "AutomationCompatibleInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AutomationCompatibleInterface>;
    deployContract(
      name: "AutomationCompatible",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AutomationCompatible>;
    deployContract(
      name: "AutomationBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AutomationBase>;

    deployContract(
      name: "Lock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Lock>;
    deployContract(
      name: "IERC20Mintable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20Mintable>;
    deployContract(
      name: "IERC20Exp",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20Exp>;
    deployContract(
      name: "FunctionsClient",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.FunctionsClient>;
    deployContract(
      name: "BaseFunctionsConsumer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.BaseFunctionsConsumer>;
    deployContract(
      name: "ARWFeed",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ARWFeed>;
    deployContract(
      name: "AGTReserveFeed",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AGTReserveFeed>;
    deployContract(
      name: "AGTFeed",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AGTFeed>;
    deployContract(
      name: "WithSettler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.WithSettler>;
    deployContract(
      name: "DataFeedAggregator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.DataFeedAggregator>;
    deployContract(
      name: "DataFeed",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.DataFeed>;
    deployContract(
      name: "ARWSupply",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ARWSupply>;
    deployContract(
      name: "SafeCast",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ContextUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "OwnableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "FunctionsRequest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.FunctionsRequest>;
    deployContract(
      name: "IFunctionsRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IFunctionsRouter>;
    deployContract(
      name: "IFunctionsClient",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IFunctionsClient>;
    deployContract(
      name: "AutomationCompatibleInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AutomationCompatibleInterface>;
    deployContract(
      name: "AutomationCompatible",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AutomationCompatible>;
    deployContract(
      name: "AutomationBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.AutomationBase>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer,
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<ethers.Contract>;
  }
}
